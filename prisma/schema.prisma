generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ATTENDEE
    SPONSOR
    ORGANIZER
    ADMIN
}

enum OrderType {
    TICKET
    PACKAGE
}

enum OrderStatus {
    RESERVED
    COMPLETED
    FAILED
    EXPIRED
}

model User {
    id        String   @id @map("_id")
    firstName String
    lastName  String
    email     String   @unique
    role      UserRole @default(ATTENDEE)
    imageUrl  String
    createdAt DateTime @default(now())

    uploads         Upload[]
    eventsOrganized Event[]   @relation("OrganizedEvents")
    sponsoredEvents Sponsor[]
    orders          Order[]
}

model Upload {
    createdAt DateTime @default(now())
    id        String   @id @default(auto()) @map("_id") @db.ObjectId

    contentType String
    filename    String
    data        Bytes

    userId String

    user  User   @relation(fields: [userId], references: [id])
    event Event[]
}

model Event {
    createdAt DateTime @default(now())
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    updatedAt DateTime @updatedAt

    description String
    endTime     DateTime
    locationURL String
    location    String
    startTime   DateTime
    summary     String

    organizerId    String
    eventRevenueId String? @unique @db.ObjectId
    imageId        String?  @db.ObjectId

    organizer    User          @relation("OrganizedEvents", fields: [organizerId], references: [id])
    eventRevenue EventRevenue? @relation("EventToRevenue", fields: [eventRevenueId], references: [id])
    image        Upload?       @relation(fields: [imageId], references: [id])

    packages Package[]
    tickets  Ticket[]
    sponsors Sponsor[]
    orders   Order[]
}

model EventRevenue {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    paidCents           Int @default(0)
    packageRevenueCents Int @default(0)
    ticketRevenueCents  Int @default(0)

    event Event? @relation("EventToRevenue")
}

model Ticket {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    description String
    price       Float
    quantity    Int
    sold        Int    @default(0)
    reserved    Int    @default(0)

    event   Event  @relation(fields: [eventId], references: [id])
    eventId String @db.ObjectId

    orderItems OrderItem[]
}

model Package {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    description String
    price       Float
    quantity    Int
    sold        Int    @default(0)
    reserved    Int    @default(0)

    event   Event  @relation(fields: [eventId], references: [id])
    eventId String @db.ObjectId

    orderItems OrderItem[]
}

model Order {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId
    createdAt        DateTime    @default(now())
    razorpayOrderId  String      @unique
    status           OrderStatus @default(RESERVED)
    totalAmountCents Int
    expiresAt        DateTime
    type             OrderType

    userId  String
    eventId String @db.ObjectId

    user  User  @relation(fields: [userId], references: [id])
    event Event @relation(fields: [eventId], references: [id])

    orderItems OrderItem[]
}

model OrderItem {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    quantity Int

    orderId   String  @db.ObjectId
    ticketId  String? @db.ObjectId
    packageId String? @db.ObjectId

    order   Order    @relation(fields: [orderId], references: [id])
    ticket  Ticket?  @relation(fields: [ticketId], references: [id])
    package Package? @relation(fields: [packageId], references: [id])
}

model Sponsor {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    sponsorId String
    eventId   String @db.ObjectId

    sponsor User  @relation(fields: [sponsorId], references: [id])
    event   Event @relation(fields: [eventId], references: [id])

    @@unique([sponsorId, eventId])
}
